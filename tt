# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

from bs4 import BeautifulSoup
import requests
import csv
import pandas as pd
import json
Header1={}

http_proxy  = "http://X119285:Password20.3@proxy-sgt.si.socgen:8080"
https_proxy = "http://X119285:Password20.3@proxy-sgt.si.socgen:8080"
ftp_proxy   = "ftp://10.10.1.10:3128"

proxyDict = { 
              "http"  : http_proxy, 
              "https" : https_proxy, 
              "ftp"   : ftp_proxy
            }

Header1["Referer"]="https://www1.nseindia.com/products/content/derivatives/equities/historical_fo.htm"
Header1["User-Agent"]="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36"
Header1["X-Requested-With"]= "XMLHttpRequest"
url = 'https://www1.nseindia.com/products/dynaContent/common/productsSymbolMapping.jsp?instrumentType=OPTSTK&symbol=AXISBANK&expiryDate=27-02-2020&optionType=CE&strikePrice=&dateRange=day&fromDate=&toDate=&segmentLink=9&symbolCount='
url="https://www1.nseindia.com/products/dynaContent/common/productsSymbolMapping.jsp?instrumentType=OPTSTK&symbol=ACC&expiryDate=27-02-2020&optionType=CE&strikePrice=&dateRange=&fromDate=02-Jan-2020&toDate=04-Feb-2020&segmentLink=9&symbolCount="

i=0
First=True
while(i<len(urls)):
    url=urls[i]
    response = requests.get(url, headers=Header1, verify=False,proxies=proxyDict)
    html=response.text
    soup = BeautifulSoup(html)
    table = soup.find_all('table')[0] 
    df = pd.read_html(str(table))
    Aa1=df[0][2:]
    Aa1.columns=df[0][1:2].iloc[0].values
    if(First):
        Final=Aa1
    else:
        Final=Final.append(Aa1)
    First=False
    i=i+1
Final.to_csv(r"C:\Users\mbhaskar111918\OneDrive - GROUP DIGITAL WORKPLACE\Documents\D_DRIVE_IN49805787L\Temp\Options\Options1.csv")


if(False):
    # -*- coding: utf-8 -*-
"""
Created on Fri Feb 28 18:25:03 2020

@author: mbhaskar111918
"""

import datetime, calendar

def LastThInMonth(year, month):
    
    # Create a datetime.date for the last day of the given month
    daysInMonth = calendar.monthrange(year, month)[1]   # Returns (month, numberOfDaysInMonth)
    dt = datetime.date(year, month, daysInMonth)

    # Back up to the most recent Thursday
    offset = 4 - dt.isoweekday()
    if offset > 0: offset -= 7                          # Back up one week if necessary
    dt += datetime.timedelta(offset)                    # dt is now date of last Th in month

    # Throw an exception if dt is in the current month and occurred before today
    now = datetime.date.today()                         # Get current date (local time, not utc)
#    if dt.year == now.year and dt.month == now.month and dt <= now:
#        raise Exception('Oops - missed the last Thursday of this month')

    return dt
Dates=[]
for year in range(2010,2021):
    for month in range(1, 13): 
        Dates.append(LastThInMonth(year, month))

i=0
D2=[]
while i<len(Dates)-1:
    DateStr={}
    i=i+1
    D=Dates[i-1]
    D1=Dates[i]
    Start=D-datetime.timedelta(2)
    WorkingDays=""
    while(Start<=D1):        
        End=Start+datetime.timedelta(1)
        if(End.isoweekday()==7):
            Start=End+datetime.timedelta(1)
            End=End+datetime.timedelta(2)
        if(End.isoweekday()==6):
            End=End+datetime.timedelta(2)
        Estr=End.strftime("%d-%b-%Y")
        Sstr=Start.strftime("%d-%b-%Y")
        if(WorkingDays!=""):
            WorkingDays+=","
        WorkingDays+=Sstr+"^"+Estr
        
        #print(Sstr+" - " + Estr + " - "+ str(End.isoweekday()))
        Start=End+datetime.timedelta(1)
    DateStr[D1.strftime("%d-%m-%Y")]=WorkingDays
    D2.append(DateStr)

i=80
Stock="SBIN"
urls=[]
while(i<95):
    print(D2[i])
    for d in D2[i]:
        print(d)
    for SDates in D2[i][d].split(","):
        SpDates=SDates.split("^")
        StartDate=SpDates[0]
        EndDate=SpDates[1]
        for Type in list(['CE','PE']):
            url = "https://www1.nseindia.com/products/dynaContent/common/productsSymbolMapping.jsp?instrumentType=OPTSTK&symbol="+Stock+"&expiryDate="+d+"&optionType="+Type+"&strikePrice=&dateRange=&fromDate="+StartDate+"&toDate="+EndDate+"&segmentLink=9&symbolCount="
            urls.append(url)
            print(url)
    i=i+1
